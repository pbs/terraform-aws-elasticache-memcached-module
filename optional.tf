variable "name" {
  description = "Name of the ElastiCache Memcached instance. If null, will default to product."
  default     = null
  type        = string
}

variable "node_type" {
  description = "ElastiCache node type"
  default     = "cache.t3.micro"
  type        = string
}

variable "apply_immediately" {
  description = "Whether any database modifications are applied immediately, or during the next maintenance window."
  default     = false
  type        = bool
}

variable "availability_zone" {
  description = "Availability Zone for the cache cluster. If you want to create cache nodes in multi-az, use preferred_availability_zones instead. Default: System chosen Availability Zone. Changing this value will re-create the resource."
  default     = null
  type        = string
}

variable "engine_version" {
  description = "Version number of the cache engine to be used. If not set, defaults to the latest version. See Describe Cache Engine Versions in the AWS Documentation for supported versions. When engine is redis and the version is 6 or higher, the major and minor version can be set, e.g., 6.2, or the minor version can be unspecified which will use the latest version at creation time, e.g., 6.x. Otherwise, specify the full version desired, e.g., 5.0.6."
  default     = null
  type        = string
}

variable "maintenance_window" {
  description = "Specifies the weekly time range for when maintenance on the cluster is performed. The format is ddd:hh24:mi-ddd:hh24:mi (24H Clock UTC). The minimum maintenance window is a 60 minute period. Example: sun:05:00-sun:09:00."
  default     = null
  type        = string
}

variable "notification_topic_arn" {
  description = "ARN of an SNS topic to send ElastiCache notifications to. Example: arn:aws:sns:us-east-1:012345678999:my_sns_topic."
  default     = null
  type        = string
}

variable "port" {
  description = "The port number on which each of the cache nodes will accept connections. Changing this value will re-create the resource."
  default     = 11211
  type        = number
}

variable "preferred_availability_zones" {
  description = "List of the Availability Zones in which cache nodes are created. If you are creating your cluster in an Amazon VPC you can only locate nodes in Availability Zones that are associated with the subnets in the selected subnet group. The number of Availability Zones listed must equal the value of num_cache_nodes. If you want all the nodes in the same Availability Zone, use availability_zone instead, or repeat the Availability Zone multiple times in the list. Default: System chosen Availability Zones. Detecting drift of existing node availability zone is not currently supported. Updating this argument by itself to migrate existing node availability zones is not currently supported and will show a perpetual difference."
  default     = null
  type        = list(string)
}

variable "az_mode" {
  description = "Whether the nodes in this Memcached node group are created in a single Availability Zone or created across multiple Availability Zones in the cluster's region. Valid values for this parameter are single-az or cross-az, default is single-az. If you want to choose cross-az, num_cache_nodes must be greater than 1."
  default     = "cross-az"
  type        = string
}

variable "security_group_ids" {
  description = "One or more VPC security groups associated with the nodes. If null, use the one provided by this module."
  default     = null
  type        = list(string)
}

variable "subnet_group_name" {
  description = "Name of the subnet group to be used for the cluster. Changing this value will re-create the resource. If null, will use the subnet group created by this module."
  default     = null
  type        = string
}

variable "parameters" {
  description = "Additional parameters that will be added to parameter group."
  type        = list(map(any))
  default     = []
}

variable "vpc_id" {
  description = "VPC ID to create the nodes in. If null, one will be guessed based on `vpc_data_lookup_tags`."
  default     = null
  type        = string
}

variable "vpc_data_lookup_tags" {
  description = "Value of the `tags` parameter in the `aws_vpc` data source used in this module. If null, a dynamic lookup based on `environment` will be used. Ignored if `vpc_id` is populated."
  default     = null
  type        = map(string)
}

variable "subnets" {
  description = "List of subnet IDs to create cluster nodes in. If null, a list will be generated by looking up subnets in the resolved VPC."
  default     = null
  type        = list(string)
}

variable "subnet_data_lookup_filters" {
  description = "Values of the `filter` blocks in the `aws_subnets` data source used in this module. If null, one will be guessed using the resolved VPC and a `Name` filter of `*-private-*`. Ignored if `subnets` is populated."
  default     = null
  type        = map(any)
}

variable "use_prefix" {
  description = "Whether to use prefixes in the resource names. If false, will use a fully specified name for resources."
  default     = true
  type        = bool
}

variable "sg_name" {
  description = "Name of the security group to be created. If null, will use the name of the nodes."
  default     = null
  type        = string
}

variable "parameter_group_name" {
  description = "Name of the parameter group to be created. If null, one will be created using the name of the cluster."
  default     = null
  type        = string
}

variable "parameter_group_version" {
  description = "The major + minor version being used for the application when creating a parameter group."
  default     = "1.6"
  type        = string
}

variable "nodes" {
  description = "The initial number of cache nodes that the cache cluster will have. This value must be between 1 and 40. If this number is reduced on subsequent runs, the highest numbered nodes will be removed."
  default     = 2
  type        = number
  validation {
    condition     = var.nodes >= 1 && var.nodes <= 40
    error_message = "The initial number of cache nodes must be between 1 and 40."
  }
}

variable "egress_cidr_blocks" {
  description = "List of CIDR blocks to assign to the egress rule of the security group. If null, `egress_security_group_ids` must be used."
  default     = ["10.0.0.0/8"]
  type        = list(string)
}

variable "egress_source_sg_id" {
  description = "List of security group ID to assign to the egress rule of the security group. If null, `egress_cidr_blocks` must be used."
  default     = null
  type        = string
}
